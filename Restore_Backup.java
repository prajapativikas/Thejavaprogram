
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sLD20-Admin
 */
public class Restore_Backup extends javax.swing.JFrame {

    /**
     * Creates new form Restore_Backup
     */
    public Restore_Backup() {
        initComponents();
          try {
            Image i = ImageIO.read(getClass().getResource("sls_logo.png"));
            setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(Restore_Backup.class.getName()).log(Level.SEVERE, null, ex);
        }
          this.setTitle("Restore_Backup");
    }
    File selectedFile;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        cbselect = new javax.swing.JComboBox();
        lblselect = new javax.swing.JLabel();
        btnselect = new javax.swing.JButton();
        lblpath = new javax.swing.JLabel();
        btn_restore = new javax.swing.JButton();
        pb_process = new javax.swing.JProgressBar();
        lbl_selected_path_restore = new javax.swing.JLabel();
        lbl_bulk_restore = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btn_view = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_backup = new javax.swing.JTable();
        btn_backup = new javax.swing.JButton();
        pb_process_backup = new javax.swing.JProgressBar();
        lbl_selected_path_backup = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jSplitPane1.setDividerLocation(410);

        cbselect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Schema", "fusion", "slquiz", "sledstudio" }));
        cbselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbselectActionPerformed(evt);
            }
        });

        lblselect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblselect.setText("Schema");

        btnselect.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnselect.setText("Select Folder");
        btnselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnselectActionPerformed(evt);
            }
        });

        lblpath.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblpath.setText("Path");

        btn_restore.setText("Restore");
        btn_restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_restoreActionPerformed(evt);
            }
        });

        pb_process.setForeground(new java.awt.Color(102, 153, 0));

        lbl_bulk_restore.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbl_bulk_restore.setText("Bulk Restore");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pb_process, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblselect)
                            .addComponent(lblpath))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbselect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnselect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(lbl_bulk_restore, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(btn_restore)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lbl_selected_path_restore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_bulk_restore)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbselect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblselect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnselect)
                    .addComponent(lblpath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(pb_process, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btn_restore)
                .addGap(35, 35, 35))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(169, 169, 169)
                    .addComponent(lbl_selected_path_restore, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(170, Short.MAX_VALUE)))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        btn_view.setText("View Schema");
        btn_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_viewActionPerformed(evt);
            }
        });

        tbl_backup.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Schema Name"
            }
        ));
        jScrollPane1.setViewportView(tbl_backup);

        btn_backup.setText("Backup");
        btn_backup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backupActionPerformed(evt);
            }
        });

        pb_process_backup.setForeground(new java.awt.Color(51, 153, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Bulk Backup");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_backup)
                            .addComponent(pb_process_backup, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_selected_path_backup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_view)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(lbl_selected_path_backup, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btn_view)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(pb_process_backup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(btn_backup)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jSplitPane1)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbselectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbselectActionPerformed

    private void btnselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnselectActionPerformed
        try {
            final JFileChooser fileDialog = new JFileChooser();
            fileDialog.setAcceptAllFileFilterUsed(false);
            fileDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            //fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Sql", "sql"));
            int returnVal = fileDialog.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileDialog.getSelectedFile();
                //JOptionPane.showMessageDialog(this, "You selected file : " + selectedFile.getAbsolutePath());
                lbl_selected_path_restore.setText(selectedFile.getAbsolutePath());
                lbl_selected_path_restore.setToolTipText(selectedFile.getAbsolutePath());
            } else {
                JOptionPane.showMessageDialog(this, "You cancelled folder selection.");
            }
        } catch (HeadlessException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnselectActionPerformed

    private void btn_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_viewActionPerformed
        try {

            DefaultTableModel model = (DefaultTableModel) tbl_backup.getModel();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + Config.DBHOST + ":3306/" + Config.SCHEMANAME, Config.DBUSER, Config.DBPASS);

            String sql = "show databases";

            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String db = rs.getString("database");
                model.addRow(new Object[]{db});
                i++;
            }

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_viewActionPerformed

    private void btn_backupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backupActionPerformed

        if (tbl_backup.getSelectedRows().length > 0) {
            new Thread() {
                public void run() {

                    //   pb_process.setText("0 %");
                    pb_process_backup.setMinimum(0);
                    pb_process_backup.setMaximum(100);
                    pb_process_backup.setValue(0);

                    pb_process_backup.setVisible(true);
                    //        lbl_process.setVisible(true);
                    pb_process_backup.setStringPainted(true);
                    repaint();

                    //                    tbl_backup.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                    //                        public void valueChanged(ListSelectionEvent event) {
                    //                            // do some actions here, for example
                    //                            // print first column value from selected row
                    //
                    //                        }
                    //                    });
                    //      System.out.println(tbl_backup.getValueAt(tbl_backup.getSelectedRow(),0));
                    int[] selectedrows = tbl_backup.getSelectedRows();

                    try {
                        final JFileChooser fileDialog = new JFileChooser();
                        fileDialog.setAcceptAllFileFilterUsed(false);
                        fileDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        //fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Sql", "sql"));

                        int returnVal = fileDialog.showSaveDialog(null);

                        if (returnVal == JFileChooser.APPROVE_OPTION) {

                            btn_backup.setEnabled(false);
                            btn_view.setEnabled(false);
                            selectedFile = fileDialog.getSelectedFile();
                            //JOptionPane.showMessageDialog(this, "You selected file : " + selectedFile.getAbsolutePath());
                            lbl_selected_path_backup.setText(selectedFile.getAbsolutePath());
                            lbl_selected_path_backup.setToolTipText(selectedFile.getAbsolutePath());

                            for (int i = 0; i < selectedrows.length; i++) {

                                String schemaName = tbl_backup.getValueAt(selectedrows[i], 0).toString().trim();
                                System.out.println(schemaName);
                                String timestamp = null;
                                String currentpath = selectedFile.getAbsoluteFile().toString().trim();
                                //  Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                                SimpleDateFormat sdf = new SimpleDateFormat("ddMMMyyyy");
                                timestamp = sdf.format(new File(currentpath).lastModified());
                                backupSQL(schemaName,
                                        selectedFile.getAbsolutePath() + File.separator + schemaName + "_" + timestamp + ".sql");

                                int percentage = (i * 100) / selectedrows.length;
                                ////
                                pb_process_backup.setValue(percentage);
                                pb_process_backup.setStringPainted(true);
                                repaint();
                                System.out.println("\n\nSetting Percentage : " + percentage + "\n");
                                //
                            }
                            pb_process_backup.setValue(100);
                            pb_process_backup.setStringPainted(true);
                            JOptionPane.showMessageDialog(null, "Schema backup completed !!!");
                            btn_view.setEnabled(true);
                            btn_backup.setEnabled(true);

                        } else {
                            JOptionPane.showMessageDialog(null, "You cancelled folder selection.");
                        }
                    } catch (HeadlessException e) {
                        e.printStackTrace();
                    }

                }
            }.start();
        } else {
            JOptionPane.showMessageDialog(null, "Please select the schema");
        }
    }//GEN-LAST:event_btn_backupActionPerformed

    private void btn_restoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_restoreActionPerformed
        // TODO add your handling code here:

        new Thread() {
            public void run() {

                //        lbl_process.setText("0 %");
                pb_process.setMinimum(0);
                pb_process.setMaximum(100);
                pb_process.setValue(0);
                pb_process.setVisible(true);
                //        lbl_process.setVisible(true);
                pb_process.setStringPainted(true);
                repaint();

                if (cbselect.getSelectedIndex() != 0) {
                    if (selectedFile != null && selectedFile.exists() && selectedFile.isDirectory()) {
                        List<File> sqlFilesList = listSQLFilesOfDirecotry(selectedFile.getAbsolutePath().trim());

                        if (sqlFilesList != null && sqlFilesList.size() > 0) {
                            Iterator<File> itZip = sqlFilesList.iterator();
                            int i = 1;

                            while (itZip.hasNext()) {

                                String currentFilePath = itZip.next().getAbsolutePath().trim();
                                if (!currentFilePath.contains(" ")) {
                                    String currentSchema = null;
                                    currentSchema = cbselect.getSelectedItem().toString().trim() + "_" + i;

                                    if (currentSchema != null) {
                                        System.out.println(
                                                "Processing schema " + currentSchema + " from : " + selectedFile.getAbsolutePath());

                                        btn_restore.setEnabled(false);
                                        btnselect.setEnabled(false);
                                        cbselect.setEnabled(false);
                                        DBfunctions.createSchema(currentSchema);
                                        DBfunctions.restoreSQL(currentSchema, currentFilePath);
                                    }
                                }

                                int percentage = (i * 100) / sqlFilesList.size();
                                ////
                                pb_process.setValue(percentage);
                                pb_process.setStringPainted(true);
                                repaint();
                                System.out.println("\n\nSetting Percentage : " + percentage + "\n");
                                //
                                i++;
                            }

                            pb_process.setValue(100);
                            pb_process.setStringPainted(true);
                            btn_restore.setEnabled(true);
                            btnselect.setEnabled(true);
                            cbselect.setEnabled(true);
                            JOptionPane.showMessageDialog(null, "SQL files restored...!!!");

                        } else {
                            JOptionPane.showMessageDialog(null, "No sql file found in folder");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "please select file from the folder");
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Please select the schema");
                }
            }
        }.start();
    }//GEN-LAST:event_btn_restoreActionPerformed

    private static List<File> listSQLFilesOfDirecotry(String toString) {
        List<File> rv = new ArrayList<File>();
        try {
            File f = new File(toString);
            if (f.isDirectory()) {
                File fa[] = f.listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String filename) {
                        return filename.endsWith(".sql");
                    }
                });
                rv = Arrays.asList(fa);
            }
        } catch (Exception e) {
            System.out.println("file is not available");
        }
        return rv;
    }

    public static String getMySQLPath() {
        String rv = "";
        try {// Truncate table data
            Connection conn = Dbcrud.openConnection("sakila");
            if (conn == null) {
                conn = Dbcrud.openConnection("test");
            }
            Statement stmt = conn.createStatement();

            ResultSet rs = stmt.executeQuery("select @@basedir as basedir");

            while (rs.next()) {
                rv = rs.getString("basedir") + "bin";
            }

            Dbcrud.closeConnection();
            // Truncate table data
        } catch (Exception e) {
            // TODO: handle exception
        }
        return rv;
    }

    public static void runCmd(String command) {
        try {
            if (!command.startsWith("cmd.exe /c ")) {
                command = "cmd.exe /c " + command;
            }

            Process runtimeProcess = Runtime.getRuntime().exec(command);
            BufferedInputStream testOutput = new BufferedInputStream(runtimeProcess.getInputStream());
            int read = 0;
            byte[] output = new byte[1024];
            while ((read = testOutput.read(output)) != -1) {
                System.out.println(output[read]);
            }
        } catch (Exception e) {
            // TODO: handle exception
        }
    }

    public static void backupSQL(String schemaName, String destPath) {
        try {
            /* NOTE: Used to create a cmd command */
            String executeCmd = "cmd.exe /c \"" + getMySQLPath() + File.separator + "mysqldump\" "
                    + "-u root -proot --no-create-db " + schemaName + " > " + destPath;
            System.out.println("executing command : " + executeCmd + "\n\nPlease wait...");
            /* NOTE: Executing the command here */
            runCmd(executeCmd);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Restore_Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Restore_Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Restore_Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Restore_Backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Restore_Backup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_backup;
    private javax.swing.JButton btn_restore;
    private javax.swing.JButton btn_view;
    private javax.swing.JButton btnselect;
    private javax.swing.JComboBox cbselect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lbl_bulk_restore;
    private javax.swing.JLabel lbl_selected_path_backup;
    private javax.swing.JLabel lbl_selected_path_restore;
    private javax.swing.JLabel lblpath;
    private javax.swing.JLabel lblselect;
    private javax.swing.JProgressBar pb_process;
    private javax.swing.JProgressBar pb_process_backup;
    private javax.swing.JTable tbl_backup;
    // End of variables declaration//GEN-END:variables
}
